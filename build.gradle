plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'io.quarkus'
    id "com.jfrog.artifactory" version "4.26.1"
    id "io.freefair.lombok" version "6.5.0.3"
    id "org.sonarqube" version "4.0.0.2929"
    id 'jacoco'
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/dlt/**/*"
            ]
            )
        }))
    }

}


configurations.all {
    exclude group: "io.quarkus", module: "quarkus-resteasy-reactive-jsonb"
    exclude group: 'com.github.spotbugs', module: 'spotbugs-annotations'
    resolutionStrategy {
        force 'io.quarkiverse.vault:quarkus-vault:4.0.1'
        force 'org.keycloak:keycloak-core:24.0.0'
    }
}

dependencies {
    implementation platform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'io.quarkus:quarkus-smallrye-openapi'

    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkiverse.vault:quarkus-vault'
    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-smallrye-fault-tolerance'
    implementation("io.quarkus:quarkus-logging-json")

    //oidc
    implementation 'io.quarkus:quarkus-oidc'
    implementation 'io.quarkus:quarkus-oidc-client-reactive-filter'
    implementation 'io.quarkus:quarkus-oidc-token-propagation-reactive'

    //KAFKA
    implementation 'io.quarkus:quarkus-smallrye-reactive-messaging-kafka'

    //REST
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
    implementation 'io.quarkus:quarkus-rest-client-reactive-jackson'

    //datasource
    implementation 'io.quarkus:quarkus-flyway'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'io.quarkus:quarkus-hibernate-validator'

    //hibernate types
    implementation 'io.quarkiverse.hibernatetypes:quarkus-hibernate-types:2.1.0'

    implementation 'com.opencsv:opencsv:5.9'

    // common lib
    implementation 'com.dlt.zeta.quarkus.common.lib:zeta-quarkus-common-lib:9'

    //aws
    implementation("io.quarkiverse.amazonservices:quarkus-amazon-s3:2.13.1")
    implementation("software.amazon.awssdk:url-connection-client:2.22.11")
    implementation 'software.amazon.awssdk:sts:2.22.11'

    //Scheduler
    implementation("io.quarkus:quarkus-scheduler")

    //test
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation "org.testcontainers:testcontainers:1.20.4"
}

group = 'com.dlt'
version = '1.0.0'
description = 'multitenancy-test'
def env = System.getenv()
if (env['BUILD_NUMBER']) {
    version = env['BRANCH_NAME'] == "master" ? env['BUILD_NUMBER'] : env['BRANCH_NAME'] + "-" + env['BUILD_NUMBER']
} else {
    version = version + "-local"
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
        if (file("$buildDir/zeta-financial-planning-svc-${version}-runner").exists()) {
            binary(MavenPublication) {
                artifact source: "$buildDir/zeta-financial-planning-svc-${version}-runner", classifier: 'bin', extension: ''
            }
        }
        if (file("$buildDir/zeta-financial-planning-svc-${version}-runner.jar").exists()) {
            binary(MavenPublication) {
                artifact source: "$buildDir/zeta-financial-planning-svc-${version}-runner.jar", classifier: 'bin', extension: 'jar'
            }
        }
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    suppressedValidationErrors.add('enforced-platform')
}

quarkusBuild {
    nativeArgs {
        containerBuild = false
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'wp-libs-snapshot-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications('mavenJava', "binary")
            publishBuildInfo = false
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repository {
            repoKey = 'wp-libs-snapshot'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

java {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}